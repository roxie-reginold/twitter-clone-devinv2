name: Automated Documentation Update on Push

on:
  push: {}                       # Trigger on any push to any branch

permissions:
  contents: write
  pull-requests: read
  issues: read

jobs:
  update-docs:
    runs-on: ubuntu-latest
    if: >
      github.actor != 'github-actions[bot]' &&
      github.event.head_commit.author.name != 'Devin AI' &&
      !contains(github.event.head_commit.author.email, 'devin-ai-integration') &&
      !contains(github.event.head_commit.message, '[skip docs]')

    steps:
    # 1. Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    # 2. Get the list of changed files
    - name: Get changed files
      id: changed-files
      run: |
        FILES=$(git diff-tree --no-commit-id --name-only -r "${{ github.sha }}" | jq -R . | jq -cs .)
        echo "files=$FILES" >>"$GITHUB_OUTPUT"

    # 3. Start Devin session
    - name: Ask Devin to update docs
      id: init-session
      env:
        DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
        FILES_TO_REVIEW: ${{ steps.changed-files.outputs.files }}
      run: |
        # Prepare the prompt for Devin session
        PROMPT="You are Devin Docs Assistant.
        1. Clone the repository ${{ github.server_url }}/${{ github.repository }} at commit ${{ github.sha }}.
        2. Install a pre-push Git hook preventing pushes by user 'Devin AI' or emails containing 'devin-ai-integration'.
        3. Review diffs for changed files: $FILES_TO_REVIEW
        4. Update docs/ and README.md to reflect code changes (create README.md if missing).
        5. Commit with message 'docs: auto-update via Devin [skip docs]' and push to the same branch.
        6. Make no code changes if docs are already current."
        
        # Call Devin API to create the session
        ESCAPED_PROMPT=$(echo "$PROMPT" | jq -Rs .)

        RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer $DEVIN_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{\"prompt\": $ESCAPED_PROMPT, \"idempotent\": true}" \
          "https://api.devin.ai/v1/sessions")

        # Check if the response contains an error
        ERROR_MSG=$(echo "$RESPONSE" | jq -r '.error')
        if [ "$ERROR_MSG" != "null" ]; then
          echo "Error creating Devin session: $ERROR_MSG"
          exit 1
        fi

        # Extract session_id and session_url from the response
        SESSION_ID=$(echo "$RESPONSE" | jq -r '.session_id')
        SESSION_URL=$(echo "$RESPONSE" | jq -r '.url')

        if [ -z "$SESSION_ID" ] || [ -z "$SESSION_URL" ]; then
          echo "Error: Devin session details are missing from the response."
          exit 1
        fi

        # Save session details as GitHub Actions output
        echo "session-id=$SESSION_ID" >> $GITHUB_OUTPUT
        echo "session-url=$SESSION_URL" >> $GITHUB_OUTPUT
        echo "Devin session created successfully: $RESPONSE"

    # 3. Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # 4. Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    # 5. Start Devin session using Python
    - name: Ask Devin to update docs
      id: init-session
      env:
        DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
        FILES_TO_REVIEW: ${{ steps.changed-files.outputs.files }}
      run: |
        python - <<'EOF'
        import os
        import json
        import requests
        import time
        import sys

        # Get environment variables
        api_key = os.environ['DEVIN_API_KEY']
        files_to_review = os.environ['FILES_TO_REVIEW']
        repo_url = "${{ github.server_url }}/${{ github.repository }}"
        commit_sha = "${{ github.sha }}"

        # Prepare the prompt for Devin session
        prompt = f"""You are Devin Docs Assistant.
        1. Clone the repository {repo_url} at commit {commit_sha}.
        2. Install a pre-push Git hook preventing pushes by user 'Devin AI' or
           emails containing 'devin-ai-integration'.
        3. Review diffs for changed files: {files_to_review}
        4. Update docs/ and README.md to reflect code changes
           (create README.md if missing).
        5. Commit with message 'docs: auto-update via Devin [skip docs]'
           and push to the same branch.
        6. Make no code changes if docs are already current."""

        # Call Devin API to create the session
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        data = {
            "prompt": prompt,
            "idempotent": True
        }

        try:
            response = requests.post(
                "https://api.devin.ai/v1/sessions",
                headers=headers,
                json=data,
                timeout=30
            )
            
            # Check if response is successful
            response.raise_for_status()
            
            # Print response details for debugging
            print(f"Response status code: {response.status_code}")
            print(f"Response content: {response.text[:200]}...")
            
            # Try to parse JSON
            try:
                response_data = response.json()
            except json.JSONDecodeError as e:
                print(f"JSON decode error: {e}")
                print(f"Raw response: {response.text[:500]}")
                sys.exit(1)

            # Check for errors
            if 'error' in response_data and response_data['error'] is not None:
                print(f"Error creating Devin session: {response_data['error']}")
                sys.exit(1)

            # Extract session_id and session_url
            session_id = response_data.get('session_id')
            session_url = response_data.get('url')

            if not session_id or not session_url:
                print("Error: Devin session details are missing from the response.")
                sys.exit(1)

            # Save session details as GitHub Actions output
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f"session-id={session_id}\n")
                f.write(f"session-url={session_url}\n")

            print(f"Devin session created successfully: {response_data}")
            
        except requests.RequestException as e:
            print(f"Request error: {e}")
            sys.exit(1)
        EOF

    # 6. Wait for Devin session to complete using Python
    - name: Wait for Devin to finish
      env:
        DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
      run: |
        python - <<'EOF'
        import os
        import json
        import requests
        import time
        import sys

        api_key = os.environ['DEVIN_API_KEY']
        session_id = "${{ steps.init-session.outputs.session-id }}"

        print(f"⏳ Waiting for Devin session {session_id} to complete...")

        headers = {
            "Authorization": f"Bearer {api_key}"
        }

        max_retries = 5
        retry_delay = 10
        
        def check_session_status():
            for attempt in range(max_retries):
                try:
                    response = requests.get(
                        f"https://api.devin.ai/v1/session/{session_id}",
                        headers=headers,
                        timeout=30
                    )
                    
                    # Check if response is successful
                    response.raise_for_status()
                    
                    # Print response details for debugging
                    print(f"Response status code: {response.status_code}")
                    print(f"Response content: {response.text[:200]}...")
                    
                    # Try to parse JSON
                    try:
                        data = response.json()
                        status = data.get('status')
                        print(f"Session status: {status}")
                        return status
                    except json.JSONDecodeError as e:
                        print(f"JSON decode error: {e}")
                        print(f"Raw response: {response.text[:500]}")
                        
                        # If we've reached max retries, re-raise the exception
                        if attempt == max_retries - 1:
                            raise
                        
                        print(f"Retrying in {retry_delay} seconds...")
                        time.sleep(retry_delay)
                except requests.RequestException as e:
                    print(f"Request error: {e}")
                    
                    # If we've reached max retries, re-raise the exception
                    if attempt == max_retries - 1:
                        raise
                    
                    print(f"Retrying in {retry_delay} seconds...")
                    time.sleep(retry_delay)
            
            return None

        try:
            # Poll for session status with retries
            while True:
                status = check_session_status()
                
                if status == "stopped":
                    print("✅ Devin session completed.")
                    break
                elif status is None:
                    print("❌ Failed to get session status after multiple retries.")
                    sys.exit(1)
                
                print(f"Session still running. Checking again in {retry_delay} seconds...")
                time.sleep(retry_delay)
        except Exception as e:
            print(f"❌ Error monitoring Devin session: {e}")
            sys.exit(1)
        EOF
