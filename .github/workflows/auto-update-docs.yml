# .github/workflows/auto-update-docs.yml
name: Automated Documentation Update on Push

on:
  push: {}                       # all branches

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  update-docs:
    runs-on: ubuntu-latest
    if: >
      github.actor != 'github-actions[bot]' &&
      github.event.head_commit.author.name != 'Devin AI' &&
      !contains(github.event.head_commit.author.email, 'devin-ai-integration') &&
      !contains(github.event.head_commit.message, '[skip docs]')

    steps:
    # 1 ── Checkout
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    # 2 ── Collect changed files and expose as step output (multiline-safe)
    - name: Get changed files
      id: changed-files
      run: |
        FILES=$(git diff-tree --no-commit-id --name-only -r "${{ github.sha }}" | jq -R . | jq -cs .)
        echo "files=$FILES" >>"$GITHUB_OUTPUT"

    # 3 ── Start Devin session
    - name: Ask Devin to update docs
      id: init-session
      env:
        DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
        FILES_TO_REVIEW: ${{ steps.changed-files.outputs.files }}
      run: |
        # Build the prompt at runtime so the JSON file list is already expanded
        PROMPT="You are Devin Docs Assistant.
        1. Clone the repository ${{ github.server_url }}/${{ github.repository }} at commit ${{ github.sha }}.
        2. Install a pre-push Git hook preventing pushes by user 'Devin AI' or emails containing 'devin-ai-integration'.
        3. Review diffs for changed files: $FILES_TO_REVIEW
        4. Update docs/ and README.md to reflect code changes (create README.md if missing).
        5. Commit with message 'docs: auto-update via Devin [skip docs]' and push to the same branch.
        6. Make no code changes if docs are already current."
        
        # Call Devin's API
        payload=$(jq -nc --arg p "$PROMPT" '{prompt:$p, idempotent:true}')
        resp=$(curl -s -X POST \
          -H "Authorization: Bearer $DEVIN_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$payload" \
          https://api.devin.ai/v1/sessions)
        
        session_id=$(echo "$resp" | jq -r .session_id)
        echo "session_id=$session_id" >> "$GITHUB_OUTPUT"

    # 4 ── Wait for Devin to finish
    - name: Wait for Devin to finish
      env:
        DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
      run: |
        session_id=${{ steps.init-session.outputs.session_id }}
        echo "⏳ Waiting for Devin session $session_id …"
        until [ "$(curl -s \
                 -H "Authorization: Bearer $DEVIN_API_KEY" \
                 https://api.devin.ai/v1/session/$session_id \
                 | jq -r .status)" = "stopped" ]; do
          sleep 10
        done
        echo "✅ Devin session completed."
