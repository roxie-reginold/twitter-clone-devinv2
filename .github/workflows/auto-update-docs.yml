---
name: Automated Documentation Update on Push

on:
  push:
    branches:
      - feature/hashtag-and-trending  # Only trigger on this branch

permissions:
  contents: write
  pull-requests: read
  issues: read

jobs:
  update-docs:
    runs-on: ubuntu-latest
    if: >
      github.actor != 'github-actions[bot]' &&
      github.event.head_commit.author.name != 'Devin AI' &&
      !contains(github.event.head_commit.author.email,
      'devin-ai-integration') &&
      !contains(github.event.head_commit.message, '[skip docs]')

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # 2. Get the list of changed files
      - name: Get changed files
        id: changed-files
        run: |
          FILES=$(git diff-tree --no-commit-id --name-only -r \
          "${{ github.sha }}" | jq -R . | jq -cs .)
          echo "files=$FILES" >>"$GITHUB_OUTPUT"

      # 3. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 4. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # 5. Start Devin session using Python
      - name: Ask Devin to update docs
        id: init-session
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
          FILES_TO_REVIEW: ${{ steps.changed-files.outputs.files }}
        run: |
          python - <<'EOF'
          import os
          import json
          import requests
          import time

          # Get environment variables
          api_key = os.environ['DEVIN_API_KEY']
          files_to_review = os.environ['FILES_TO_REVIEW']
          repo_url = "${{ github.server_url }}/${{ github.repository }}"
          commit_sha = "${{ github.sha }}"

          # Prepare the prompt for Devin session
          prompt = f"""You are Devin Docs Assistant.
          1. Clone the repository {repo_url} at commit {commit_sha}.
          2. Install a pre-push Git hook preventing pushes by user 'Devin AI' or
             emails containing 'devin-ai-integration'.
          3. Review diffs for changed files: {files_to_review}
          4. Update docs/ and README.md to reflect code changes
             (create README.md if missing).
          5. Commit with message 'docs: auto-update via Devin [skip docs]'
             and push to the same branch.
          6. Make no code changes if docs are already current."""

          # Call Devin API to create the session
          headers = {
              "Authorization": f"Bearer {api_key}",
              "Content-Type": "application/json"
          }

          data = {
              "prompt": prompt,
              "idempotent": True
          }

          response = requests.post(
              "https://api.devin.ai/v1/sessions",
              headers=headers,
              json=data
          )
          response_data = response.json()

          # Check for errors
          if 'error' in response_data and response_data['error'] is not None:
              print(f"Error creating Devin session: {response_data['error']}")
              exit(1)

          # Extract session_id and session_url
          session_id = response_data.get('session_id')
          session_url = response_data.get('url')

          if not session_id or not session_url:
              print("Error: Devin session details are missing from the response.")
              exit(1)

          # Save session details as GitHub Actions output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"session-id={session_id}\n")
              f.write(f"session-url={session_url}\n")

          print(f"Devin session created successfully: {response_data}")
          EOF

      # 6. Wait for Devin session to complete using Python
      - name: Wait for Devin to finish
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
        run: |
          python - <<'EOF'
          import os
          import json
          import requests
          import time

          api_key = os.environ['DEVIN_API_KEY']
          session_id = "${{ steps.init-session.outputs.session-id }}"

          print(f"⏳ Waiting for Devin session {session_id} to complete...")

          headers = {
              "Authorization": f"Bearer {api_key}"
          }

          while True:
              response = requests.get(
                  f"https://api.devin.ai/v1/session/{session_id}",
                  headers=headers
              )
              status = response.json().get('status')
              if status == "stopped":
                  break
              time.sleep(10)

          print("✅ Devin session completed.")
          EOF
