name: Automated Documentation Update on Push

on:
  push: {}                       # Trigger on any push to any branch

permissions:
  contents: write
  pull-requests: read
  issues: read

jobs:
  update-docs:
    runs-on: ubuntu-latest
    if: >
      github.actor != 'github-actions[bot]' &&
      github.event.head_commit.author.name != 'Devin AI' &&
      !contains(github.event.head_commit.author.email, 'devin-ai-integration') &&
      !contains(github.event.head_commit.message, '[skip docs]')

    steps:
    # 1. Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    # 2. Get the list of changed files
    - name: Get changed files
      id: changed-files
      run: |
        FILES=$(git diff-tree --no-commit-id --name-only -r "${{ github.sha }}" | jq -R . | jq -cs .)
        echo "files=$FILES" >> $GITHUB_OUTPUT

    # 3. Start Devin session
    - name: Ask Devin to update docs
      id: init-session
      env:
        DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
        FILES_TO_REVIEW: ${{ steps.changed-files.outputs.files }}
        UPDATE_PROMPT: |
          You are Devin Docs Assistant.
          1. Clone the repository ${{ github.server_url }}/${{ github.repository }} at commit ${{ github.sha }}.
          2. Install a pre-push Git hook preventing pushes by user 'Devin AI' or emails containing 'devin-ai-integration'.
          3. Review diffs for changed files: ${{ steps.changed-files.outputs.files }}
          4. Update existing README.md files to reflect code changes (create one README.md in root directory if missing).
          5. Commit with message 'docs: auto-update via Devin [skip docs]' and push to the same branch.
          6. Make no code changes if docs are already up to date.
      run: |
        # Call Devin API to create the session using the approach from the working workflow
        ESCAPED_PROMPT=$(jq -Rn --arg p "$UPDATE_PROMPT" '$p')
        
        RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer $DEVIN_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{\"prompt\":$ESCAPED_PROMPT}" \
          "https://api.devin.ai/v1/sessions")
          
        echo "Devin session created: $RESPONSE"

    # 4. Wait for Devin session to complete
    - name: Wait for Devin to finish
      run: |
        echo "‚è≥ Polling Devin session until completion..."
        # The workflow completes without waiting for Devin to finish
        # This avoids the stuck issue while Devin continues to run in the background
