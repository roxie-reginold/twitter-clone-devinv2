name: Automated Documentation Update on Push

on:
  push: {}                       # Trigger on any push to any branch

permissions:
  contents: write
  pull-requests: read
  issues: read

jobs:
  update-docs:
    runs-on: ubuntu-latest
    if: >
      github.actor != 'github-actions[bot]' &&
      github.event.head_commit.author.name != 'Devin AI' &&
      !contains(github.event.head_commit.author.email, 'devin-ai-integration') &&
      !contains(github.event.head_commit.message, '[skip docs]')

    steps:
    # 1. Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    # 2. Get the list of changed files
    - name: Get changed files
      id: changed-files
      run: |
        FILES=$(git diff-tree --no-commit-id --name-only -r "${{ github.sha }}" | jq -R . | jq -cs .)
        echo "files=$FILES" >>"$GITHUB_OUTPUT"

    # 3. Start Devin session
    - name: Ask Devin to update docs
      id: init-session
      env:
        DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
        FILES_TO_REVIEW: ${{ steps.changed-files.outputs.files }}
      run: |
        # Prepare the prompt for Devin session
        PROMPT="You are Devin Docs Assistant.
        1. Clone the repository ${{ github.server_url }}/${{ github.repository }} at commit ${{ github.sha }}.
        2. Install a pre-push Git hook preventing pushes by user 'Devin AI' or emails containing 'devin-ai-integration'.
        3. Review diffs for changed files: $FILES_TO_REVIEW
        4. Update docs/ and README.md to reflect code changes (create README.md if missing).
        5. Commit with message 'docs: auto-update via Devin [skip docs]' and push to the same branch.
        6. Make no code changes if docs are already current."
        
        # Call Devin API to create the session
        ESCAPED_PROMPT=$(echo "$PROMPT" | jq -Rs .)

        RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer $DEVIN_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{\"prompt\": $ESCAPED_PROMPT, \"idempotent\": true}" \
          "https://api.devin.ai/v1/sessions")

        # Check if the response contains an error
        ERROR_MSG=$(echo "$RESPONSE" | jq -r '.error')
        if [ "$ERROR_MSG" != "null" ]; then
          echo "Error creating Devin session: $ERROR_MSG"
          exit 1
        fi

        # Extract session_id and session_url from the response
        SESSION_ID=$(echo "$RESPONSE" | jq -r '.session_id')
        SESSION_URL=$(echo "$RESPONSE" | jq -r '.url')

        if [ -z "$SESSION_ID" ] || [ -z "$SESSION_URL" ]; then
          echo "Error: Devin session details are missing from the response."
          exit 1
        fi

        # Save session details as GitHub Actions output
        echo "session-id=$SESSION_ID" >> $GITHUB_OUTPUT
        echo "session-url=$SESSION_URL" >> $GITHUB_OUTPUT
        echo "Devin session created successfully: $RESPONSE"

    # 4. Wait for Devin session to complete
    - name: Wait for Devin to finish
      env:
        DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
      run: |
        session_id=${{ steps.init-session.outputs.session-id }}
        echo "⏳ Waiting for Devin session $session_id to complete..."
        until [ "$(curl -s \
                 -H "Authorization: Bearer $DEVIN_API_KEY" \
                 https://api.devin.ai/v1/session/$session_id \
                 | jq -r .status)" = "stopped" ]; do
          sleep 10
        done
        echo "✅ Devin session completed."
