# .github/workflows/auto-update-docs.yml
name: Automated Documentation Update on Push

on:
  push:
    branches: ["**"]        # run on every branch push

permissions:
  contents: write          # allow committing docs updates
  pull-requests: write     # (optional) if pushing to PR refs
  issues: read

jobs:
  update-docs:
    runs-on: ubuntu-latest
    # Skip if the actor is the Actions bot or if Devin AI pushed or [skip docs] tag present
    if: >
      github.actor != 'github-actions[bot]' &&
      github.event.head_commit.author.name != 'Devin AI' &&
      !contains(github.event.head_commit.author.email, 'devin-ai-integration') &&
      !contains(github.event.head_commit.message, '[skip docs]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2        # fetch previous commit for diff

      - name: Get changed files
        id: changed-files
        run: |
          # List files changed in the last commit
          FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} \
            | jq -R . | jq -s .)
          echo "files=$FILES" >> $GITHUB_OUTPUT

      - name: Ask Devin to update docs
        id: devin-docs
        env:
          DEVIN_API_KEY:   ${{ secrets.DEVIN_API_KEY }}
          FILES_TO_REVIEW: ${{ steps.changed-files.outputs.files }}
          UPDATE_PROMPT: |
            You are Devin Docs Assistant.
            1. Clone the repository ${{ github.server_url }}/${{ github.repository }} at commit ${{ github.sha }} locally.
            2. Set up a pre-push Git hook that prevents pushes from a user with username "Devin AI" or email containing "devin-ai-integration". Activate the hook.
            3. Review the diffs for changed files (files: $FILES_TO_REVIEW).
            4. Update existing documentation (docs/ and README.md) to reflect these code changes.
            5. If no README.md exists, create one at the project root summarizing the project and changes.
            6. Commit with message "docs: auto-update via Devin [skip docs]" and push that commit back to the same branch.
            7. Do not modify code or create docs beyond README.md.
            8. If documentation already reflects changes, do nothing.
        run: |
          ESCAPED_PROMPT=$(jq -Rn --arg p "$UPDATE_PROMPT" '$p')
          curl -s -X POST \
            -H "Authorization: Bearer $DEVIN_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"prompt\":$ESCAPED_PROMPT}" \
            https://api.devin.ai/v1/sessions

      - name: Wait for Devin to finish
        run: |
          echo "‚è≥ Polling Devin session until completion..."
          # Insert polling logic: GET /v1/sessions/{session_id} until status == 'stopped'
